#!/bin/shexec ruby -S -x "$0" ${@+"$@"}#!rubyrequire "typhoeus"#require 'pry'require 'nokogiri'def analyze_listpage_utamap(songlist)  # output; singer, lyric_by, written_by	result = []	tables = songlist.xpath('//table')  rows   = tables[2].css('tr')  rows.each_with_index do |row, i|	  if i < 2		  next;	  end	  	  cols = row.css('td')	  href = nil	  # is this correct row?    unless cols[0].css('a').empty? || cols.length < 4	 	  name = cols[0].text	 	  singer = cols[1].text	 	  lyric = cols[2].text	 	  write = cols[3].text	    	    href = cols[0].css('a').attribute('href').value 	    song_id = href.match(/\?surl=(.+)/)[1]	    result.push({    	  name: name,     	  singer: singer,    	  lyric: lyric,    	  write: write,    	  song_id: song_id      })	  end  end  return resultenddef analyze_listpage_kget(songlist)  # output; singer, lyric_by, written_by	result = []	items = songlist.css('ul.songlist li')  items.each do |row|  	anchor = row.css('.lyric-anchor')	  href = anchor.attribute('href').value	  name = anchor.text	  singer = row.css('.artist').text	  by = row.css('.by p')	  if by[0]	    lyric = by[0].css('em').text	  end	  if by[1]	    write = by[1].css('em').text	  end 	  song_id = href	  result.push({      name: name,       singer: singer,      lyric: lyric,      write: write,      song_id: song_id    })  end  return resultenddef get_songlist_utamap(word, option)	list = []	result = {}	address = "http://www.utamap.com/searchkasi.php?searchname=#{option}&#{word}&act=search&search_by_keyword=%8C%9F%26%23160%3B%26%23160%3B%26%23160%3B%8D%F5&sortname=1&pattern=1"  songlist_html = Typhoeus.get(address)  songlist = Nokogiri::HTML.parse(songlist_html.body, nil, 'EUC-JP')  tables = songlist.xpath('//table')  song_num = tables[1].css('td').first.text.match(/全 (.+) 件/)[1].to_i  page_num = (song_num-1) / 30 + 1  # limit to 10 pages  #if page_num > 10  #	page_num = 10  #end  for i in 0..(page_num-1) do  	if i != 0  		html = Typhoeus.get("#{address}&page=#{i}")  		html_list = Nokogiri::HTML.parse(html.body, nil, 'EUC-JP')  		arr = analyze_listpage_utamap(html_list)  	else  		arr = analyze_listpage_utamap(songlist)  	end    list = list + arr  end  result[:num] = song_num  result[:list] = list    return resultenddef get_songlist_kget(word1, word2)	list = []	result = {}	query = URI.encode_www_form(r: word1, t: word2)	address = "http://www.kget.jp/search/index.php?c=0&#{query}&v=&f="  songlist_html = Typhoeus.get(address)  songlist = Nokogiri::HTML.parse(songlist_html.body, nil, 'UTF-8')  pos = 3  if word1 != nil && word2 != nil    pos = 4  end  # get song_num  h1 = songlist.css("h1.keep-level")  # on not found  if h1.empty?  	result[:num] = 0    result[:list] = []    return result  end  song_num = h1.first.css("strong")[pos].text.match(/(.+)件/)[1].to_i  page_num = (song_num-1) / 25 + 1  # limit to 10 pages  #if page_num > 10  #	page_num = 10  #end  for i in 0..(page_num-1) do  	if i != 0  		html = Typhoeus.get("#{address}&n=#{i+1}")  		html_list = Nokogiri::HTML.parse(html.body, nil, 'UTF-8')  		arr = analyze_listpage_kget(html_list)  	else  		arr = analyze_listpage_kget(songlist)  	end    list = list + arr  end  result[:num] = song_num  result[:list] = list    return resultenddef get_lyric_utamap(song_id)  html = Typhoeus.get("http://www.utamap.com/showtop.php?surl=#{song_id}")    data = Nokogiri::HTML.parse(html.body, nil, 'EUC-JP')  result = ""  data.css('td.kasi_honbun').children.to_a.each do |line|  	if line.text?  	  result = result + line.text  	else  		result = "#{result}\n"  	end  end  return resultenddef get_lyric_kget(song_id)  html = Typhoeus.get("http://www.kget.jp#{song_id}")    data = Nokogiri::HTML.parse(html.body, nil, 'UTF-8')  result = ""  data.css('#lyric-trunk').children.to_a.each do |line|  	if line.text?  	  result = result + line.text  	end  end  return resultenddef lyric_output(song, site)	puts "#{song[:name]}"  puts "アーティスト: #{song[:singer]}"  puts "作詞: #{song[:lyric]}"	puts "作曲: #{song[:write]}"	# write lyric	if site == :utamap    puts get_lyric_utamap(song[:song_id])  elsif site == :kget  	puts get_lyric_kget(song[:song_id])  endenddef write_lyric(word1, word2, option, site)	if site == :utamap	  word_encode = URI.encode_www_form(word: word1.encode("Shift_JIS"))	  list = get_songlist_utamap(word_encode, option)[:list]	elsif site == :kget		if option == "artist"			r = word1			t = word2		elsif option == "title"			r = word2			t = word1		end		list = get_songlist_kget(r, t)[:list]  end	if word2 == nil		# download the first data when word2 is unavailable		unless list.empty?		  song = list[0]		  lyric_output(song, site)		end	else    list.each do |song|    	# select search target      if option == "artist"      	target = song[:name]      elsif option == "title"      	target = song[:singer]      else      	target = nil      end      # search strings      if target         if target.match(/#{word2}/i)    	    lyric_output(song, site)    	    break        end      end    end  endenddef write_songlist(word, option, site)  if site == :utamap  	word_encode = URI.encode_www_form(word: word.encode("Shift_JIS"))    list = get_songlist_utamap(word_encode, option)  elsif site == :kget  	word_encode = word  	list = get_songlist_kget(word_encode, "")  end  list[:list].each do |song|    str = "#{song[:name]} : #{song[:singer]}"    puts str  end  puts "\nsearch by #{option}:\n#{word} => 全#{list[:num]}件"enddef show_usage()	puts "getlyric.rb version 1.1"	puts "copyright(C) 2020 okabee-dic\n"  puts "usage: ruby getlyric.rb [-k] [-l <artistname>] <artistname> <songname>\n"  puts "    or ruby getlyric.rb [-k] -t [-l <songname>] <songname> <artistname>"  puts "\n[options]"  puts "-l : get song list from artist name."  puts "-t : search songs from song name."  puts "-k : get lyrics from kget.jp"end# main routineARGC = ARGV.lengthoptions = {}ctl_flag = 0artist = niltitle = niloptions[:site] = :utamap# get optionfor i in 0..(ARGC-1) do  arg = ARGV[i]  if str = arg.match(/^-(.+)/)  # set option    case str[1]      when "l" then      	options[:list] = true      when "h" then      	options[:help] = true      when "t" then      	options[:title] = true      when "k" then      	# use www.kget.jp      	options[:site] = :kget      when "u" then      	# use www.utamap.com      	options[:site] = :utamap    end  # or set artist or title  else  	if ctl_flag == 0  		artist = arg  		ctl_flag += 1  		next;  	end  	if ctl_flag == 1  		title = arg  		ctl_flag += 1  		next;  	end  endend# when show usageif artist == nil || options[:help]  show_usage()  return 1end# select search target is artist or titletarget = "artist"if options[:title]  target = "title"end	if options[:list]	# list mode	write_songlist(artist, target, options[:site])else	# show lyric  write_lyric(artist, title, target, options[:site])end